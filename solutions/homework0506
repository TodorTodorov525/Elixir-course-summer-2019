
  def zad1(tuple \\ {0, 0, "+"}) do
    case tuple do
      {a, b, "-"} when is_number(a) and is_number(b) -> (a - b) * (a * a + a * b + b * b)
      {a, b, "+"} when is_number(a) and is_number(b) -> (a + b) * (a * a - a * b + b * b)
      _ -> "invalid arguments"
    end
  end

--------------------------------------------------------------
defmodule John do
  def hey(input) do
    cond do
      String.trim(input) == "" -> "Yo."
      question_shout?(input) -> "Only the weak shout."
      question?(input) -> "Eurofootball matches haven't gone out."
      shout?(input) -> "Shut up."
      true -> "K"
    end
  end

  defp question_shout?(input) do
    String.ends_with?(input, "?") && check_shout?(input)
  end

  defp shout?(input) do
    String.upcase(input) == input && String.upcase(input) != String.downcase(input)
  end

  defp question?(input) do
    String.ends_with?(input, "?")
  end
end


---------------------------------------------------------------

 def zad3(str) do
    if String.length(str) > 9 do
      "long string"
    else
      "short string"
    end
  end

  def zad4(str1, str2) do
    cond do
      String.length(str1) == String.length(str2) -> "#{str1} and #{str2} are equal"
      String.length(str1) < String.length(str2) -> "#{str1} is shorter than #{str2}"
      String.length(str1) > String.length(str2) -> "#{str1} is longer than #{str2}"
      true -> "something is wrong"
    end
  end

  def zadk5(list) do
    case list do
      [h | t] when is_number(h) -> to_string(h)
      [h | t] when is_atom(h) -> to_string(h)
      _ -> ""
    end
  end

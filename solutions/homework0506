1.
  def zad1(tuple \\ {0, 0, "+"}) do
    case tuple do
      {a, b, "-"} when is_number(a) and is_number(b) -> (a - b) * (a * a + a * b + b * b)
      {a, b, "+"} when is_number(a) and is_number(b) -> (a + b) * (a * a - a * b + b * b)
      _ -> "invalid arguments"
    end
  end


2.
defmodule John do
  def hey(input) do
    cond do
      String.trim(input) == "" -> "Yo."
      question_shout?(input) -> "Only the weak shout."
      question?(input) -> "Eurofootball matches haven't gone out."
      shout?(input) -> "Shut up."
      true -> "K"
    end
  end

  defp question_shout?(input) do
    String.ends_with?(input, "?") && check_shout?(input)
  end

  defp shout?(input) do
    String.upcase(input) == input && String.upcase(input) != String.downcase(input)
  end

  defp question?(input) do
    String.ends_with?(input, "?")
  end
end


3.
 def zad3(str) do
    if String.length(str) > 9 do
      "long string"
    else
      "short string"
    end
  end


4.
  def zad4(str1, str2) do
    cond do
      String.length(str1) == String.length(str2) -> "#{str1} and #{str2} are equal"
      String.length(str1) < String.length(str2) -> "#{str1} is shorter than #{str2}"
      String.length(str1) > String.length(str2) -> "#{str1} is longer than #{str2}"
      true -> "something is wrong"
    end
  end


5.
  def zad5(list) do
    case list do
      [h | t] when is_number(h) -> to_string(h)
      [h | t] when is_atom(h) -> to_string(h)
      _ -> ""
    end
  end


6.
  def hw6(param1, param2) do
      cond do
          !is_integer(param1) || !is_integer(param2) ->
              "Both parameters should be integers."
          param1 > 4 -> "ok"
          param2 > 1 || param1 == 3 -> param2
          true -> "Dunno. I'm the default answer"
      end
  end


7.
  def hw7(tuple) do
      cond do
          !is_tuple(tuple) ->
              "The parameter should be a tuple."
          tuple_size(tuple) == 3 && elem(tuple, 1) > 1 ->
              elem(tuple, 1)
          tuple_size(tuple) == 2 && elem(tuple, 0) == 3 ->
              elem(tuple, 1)
          tuple_size(tuple) == 1 && elem(tuple, 0) > 4 ->
              elem(tuple, 0)
          true ->
              "default"
      end
  end


8. 
  def hw8(tuple) do
      cond do
          !is_tuple(tuple) -> "The argument should be a tuple."
          tuple_size(tuple) > 1 &&
          elem(tuple, 0) > elem(tuple, 1) -> elem(tuple, 0)
          tuple_size(tuple) > 2 -> elem(tuple, 1) + elem(tuple, 2)
          true -> "default"
      end
  end 



9. Football task

  @struct %{
    "Red" => %{
      "gk" => {"Ali Baba", 28, "right", 0},
      "def" => {"Ivan Ivanov", 34, "right", 0},
      "mid" => {"Eli Marques", 22, "left", 0},
      "atk" => {"Valeri Bozhinov", 35, "right", 0}
    },
    "Blue" => %{
      "gk" => {"Zdravko Zdravkov", 48, "left", 0},
      "def" => {"Elin Topuzakov", 42, "left", 0},
      "mid" => {"Obi-Wan Kenobi", 18, "right", 0},
      "atk" => {"Cherno Samba", 32, "left", 0}
    },
    "Green" => %{
      "gk" => {"Ilko Pirgov", 22, "left", 0},
      "def" => {"Jackie Chan", 25, "left", 0},
      "mid" => {"Hali Thiam", 33, "right", 0},
      "atk" => {"Big Shaq", 20, "left", 0}
    }
  }

    def new_match([home_name, home_goals, away_name, away_goals]) do
    result = [home_goals, away_goals]

    new_struct =
      case result do
        [0, away_goals] ->
          new_struct = @struct

          str_home =
            @struct[home_name]
            |> Map.put("gk", update_gk(home_name, away_goals))

          new_struct = new_struct |> Map.put(home_name, str_home)
          away_goals(away_name, away_goals, new_struct)

        [home_goals, away_goals] when home_goals < 3 ->
          new_struct = @struct

          str_home =
            @struct[home_name]
            |> Map.put("atk", update_field_player(home_name, home_goals, "atk"))
            |> Map.put("gk", update_gk(home_name, away_goals))

          str_away =
            @struct[away_name]
            |> Map.put("gk", update_gk(away_name, home_goals))

          new_struct = new_struct |> Map.put(home_name, str_home) |> Map.put(away_name, str_away)

          away_goals(away_name, away_goals, new_struct)

        [3, away_goals] ->
          new_struct = @struct

          str_home =
            @struct[home_name]
            |> Map.put("atk", update_field_player(home_name, 2, "atk"))
            |> Map.put("mid", update_field_player(home_name, 1, "mid"))
            |> Map.put("gk", update_gk(home_name, away_goals))

          str_away =
            @struct[away_name]
            |> Map.put("gk", update_gk(away_name, home_goals))

          new_struct = new_struct |> Map.put(home_name, str_home) |> Map.put(away_name, str_away)
          away_goals(away_name, away_goals, new_struct)

        [4, away_goals] ->
          new_struct = @struct

          str_home =
            @struct[home_name]
            |> Map.put("atk", update_field_player(home_name, 2, "atk"))
            |> Map.put("mid", update_field_player(home_name, 1, "mid"))
            |> Map.put("def", update_field_player(home_name, 1, "def"))
            |> Map.put("gk", update_gk(home_name, away_goals))

          str_away =
            @struct[away_name]
            |> Map.put("gk", update_gk(away_name, home_goals))

          new_struct = new_struct |> Map.put(home_name, str_home) |> Map.put(away_name, str_away)
          away_goals(away_name, away_goals, new_struct)
      end

    new_struct
  end

  def update_goals({name, age, foot, _goals}, new_goals) do
    {name, age, foot, new_goals}
  end

  def update_gk(team_name, goals) do
    {:ok, team_map} = Map.fetch(@struct, team_name)
    gk_goals = (Tuple.to_list(team_map["gk"]) |> Enum.at(3)) - goals
    update_goals(team_map["gk"], gk_goals)
  end

  def update_field_player(team_name, goals, pos) do
    {:ok, team_map} = Map.fetch(@struct, team_name)

    f_goals = (Tuple.to_list(team_map[pos]) |> Enum.at(3)) + goals

    update_goals(team_map[pos], f_goals)
  end

  def away_goals(away_name, away_goals, new_struct) do
    cond do
      away_goals == 0 ->
        new_struct

      away_goals > 0 and away_goals < 3 ->
        new_struct_with_away_goalscores =
          new_struct[away_name]
          |> Map.put("atk", update_field_player(away_name, away_goals, "atk"))

        new_struct |> Map.put(away_name, new_struct_with_away_goalscores)

      away_goals == 3 ->
        new_struct_with_away_goalscores =
          new_struct[away_name]
          |> Map.put("atk", update_field_player(away_name, 2, "atk"))
          |> Map.put("mid", update_field_player(away_name, 1, "mid"))

        new_struct |> Map.put(away_name, new_struct_with_away_goalscores)

      away_goals == 4 ->
        new_struct_with_away_goalscores =
          new_struct[away_name]
          |> Map.put("atk", update_field_player(away_name, 2, "atk"))
          |> Map.put("mid", update_field_player(away_name, 1, "mid"))
          |> Map.put("def", update_field_player(away_name, 1, "def"))

        new_struct |> Map.put(away_name, new_struct_with_away_goalscores)

      true ->
        @struct
    end
  end